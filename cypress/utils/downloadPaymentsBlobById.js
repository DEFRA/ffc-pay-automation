require('dotenv').config();
const { BlobServiceClient } = require('@azure/storage-blob');
const fs = require('fs');
const path = require('path');
const csv = require('csv-parser');

async function downloadPaymentsBlobById (containerName, downloadDir) {

  //This function downloads report from Azure Blob storage and checks that relevant values are correct

  const blobServiceClient = BlobServiceClient.fromConnectionString(process.env.PAYMENTSBLOBCONNECTIONSTRING);
  console.log('Blob Service Client = ' + blobServiceClient.url);
  console.log('Container name = ' + containerName);
  const containerClient = blobServiceClient.getContainerClient(containerName);
  console.log('Container client = ' + containerClient.url);

  let blobs = containerClient.listBlobsFlat();
  let matchingBlob = null;

  //This finds the file by it's partial name as they are autogenerated with names predicated on time of creation
  for await (const blob of blobs) {
    if (blob.name.includes(process.env.PAYMENTPARTIALFILENAME)) {
      matchingBlob = blob;
      break;
    }
  }

  if (!matchingBlob) {
    console.error(`‚ö†Ô∏è No blobs found matching the partial name: "${process.env.PAYMENTPARTIALFILENAME}"`);
    return;
  }

  console.log(`Matched Blob: ${matchingBlob.name}`);

  const downloadPath = path.join(downloadDir, path.basename(matchingBlob.name));
  console.log('Download path = ' + downloadPath);

  //Downloads file to cypress/downloads

  try {
    await containerClient.getBlobClient(matchingBlob.name).downloadToFile(downloadPath);
    console.log(`üìç Saved to: ${downloadPath}`);

  } catch (error) {
    console.log(error);
    throw error;
  }

  const results = [];
  const requiredValues = [
    '2015', '40605', '106762768',
    'SOS710', '12/06/2023', 'DRD05', 'FC00',
    '58.80'
  ];

  await new Promise((resolve, reject) => {
    fs.createReadStream(downloadPath)
      .pipe(csv())
      .on('data', (data) => results.push(data))
      .on('end', () => {
        console.log('Extracted CSV Data:\n', results);

        // Flatten all values from all rows into a single array of strings
        const allValues = results.flatMap(row => Object.values(row).map(String));

        // Check if every required value is present
        const missingValues = requiredValues.filter(val => !allValues.includes(val));

        if (missingValues.length === 0) {
          console.log('‚úÖ All required values are present in the CSV.');
        } else {
          console.error(`‚ùå Missing values: ${missingValues.join(', ')}`);
          throw new Error('CSV does not contain all expected data.');
        }

        resolve();
      })
      .on('error', (err) => {
        console.error(`‚ö†Ô∏è Error reading CSV file: ${err.message}`);
        reject(err);
      });
  });

  return downloadPath;


}

module.exports = downloadPaymentsBlobById;