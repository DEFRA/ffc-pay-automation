require('dotenv').config();
const { BlobServiceClient } = require('@azure/storage-blob');
const fs = require('fs');
const path = require('path');
const pdf = require('pdf-parse');

async function downloadBlobById (containerName, downloadDir) {

  //This function downloads report from Azure Blob storage and checks that relevant values are correct

  const blobServiceClient = BlobServiceClient.fromConnectionString(process.env.BLOBCONNECTIONSTRING);
  console.log('Blob Service Client = ' + blobServiceClient.url);
  const containerClient = blobServiceClient.getContainerClient(containerName);
  console.log('Container client = ' + containerClient.url);

  let blobs = containerClient.listBlobsFlat();
  let matchingBlob = null;

  //This finds the file by it's partial name as they are autogenerated with names predicated on time of creation
  for await (const blob of blobs) {
    if (blob.name.includes(process.env.STATEMENTPARTIALFILENAME)) {
      matchingBlob = blob;
      break;
    }
  }

  if (!matchingBlob) {
    console.error(`‚ö†Ô∏è No blobs found matching the partial name: "${process.env.STATEMENTPARTIALFILENAME}"`);
    return;
  }

  console.log(`Matched Blob: ${matchingBlob.name}`);

  const downloadPath = path.join(downloadDir, path.basename(matchingBlob.name));
  console.log('Download path = ' + downloadPath);

  //Downloads file to cypress/downloads

  try {
    await containerClient.getBlobClient(matchingBlob.name).downloadToFile(downloadPath);
    console.log(`üìç Saved to: ${downloadPath}`);

  } catch (error) {
    console.log(error);
    throw error;
  }

  //Converts PDF content into readable text string and confirms presence of expected values

  try {
    const dataBuffer = fs.readFileSync(downloadPath);
    const pdfData = await pdf(dataBuffer);
    console.log('Extracted Text:\n', pdfData.text);

    if (pdfData.text.includes('TEST FARM', '8 THE STREET', 'AA1 1BB', 'Single Business Identifier (SBI): 123456789', 'Delinked payments 2025: payment statement', 'Payment amount: ¬£37,500')) {
      console.log('PDF contains expected data');
    } else {
      console.log('PDF does not contain expected data');
      throw 'Error';
    }
  } catch (err) {
    console.error(`‚ö†Ô∏è Error reading file: ${err.message}`);
    throw err;
  }

  return downloadPath;


}

module.exports = downloadBlobById;